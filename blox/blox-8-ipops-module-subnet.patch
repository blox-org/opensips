From cd6ab669f6abb90719e8b1e1660f14309da9622e Mon Sep 17 00:00:00 2001
From: Varadhan M <varadhan@cem-solutions.net>
Date: Fri, 11 Dec 2015 02:18:28 -0800
Subject: [PATCH] Added subnet function to ipops module

---
 modules/ipops/ipops_mod.c |  132 +++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 132 insertions(+), 0 deletions(-)

diff --git a/modules/ipops/ipops_mod.c b/modules/ipops/ipops_mod.c
index 108d34e..acec588 100644
--- a/modules/ipops/ipops_mod.c
+++ b/modules/ipops/ipops_mod.c
@@ -65,6 +65,7 @@
  * Module internal functions
  */
 static int _compare_ips(char*, size_t, enum enum_ip_type, char*, size_t, enum enum_ip_type);
+int _ip_is_in_subnet(char *ip1, size_t len1, enum enum_ip_type ip1_type, char *ip2, size_t len2, enum enum_ip_type ip2_type, int netmask);
 
 
 /*
@@ -79,6 +80,7 @@ static int w_ip_type(struct sip_msg*, char*);
 static int w_compare_ips(struct sip_msg*, char*, char*);
 static int w_compare_pure_ips(struct sip_msg*, char*, char*);
 static int w_is_ip_rfc1918(struct sip_msg*, char*);
+static int w_ip_is_in_subnet(struct sip_msg*, char*, char*);
 
 
 /*
@@ -104,6 +106,8 @@ static cmd_export_t cmds[] =
   REQUEST_ROUTE|FAILURE_ROUTE|ONREPLY_ROUTE|BRANCH_ROUTE|LOCAL_ROUTE },
   { "is_ip_rfc1918", (cmd_function)w_is_ip_rfc1918, 1, fixup_spve_null, 0,
   REQUEST_ROUTE|FAILURE_ROUTE|ONREPLY_ROUTE|BRANCH_ROUTE|LOCAL_ROUTE },
+  { "is_in_subnet", (cmd_function)w_ip_is_in_subnet, 2, fixup_spve_spve, 0,
+		REQUEST_ROUTE|FAILURE_ROUTE|ONREPLY_ROUTE|BRANCH_ROUTE|LOCAL_ROUTE },
   { 0, 0, 0, 0, 0, 0 }
 };
 
@@ -169,6 +173,61 @@ static int _compare_ips(char *ip1, size_t len1, enum enum_ip_type ip1_type, char
   }
 }
 
+/*! \brief Return 1 if IP1 is in the subnet given by IP2 and the netmask, 0 otherwise. */
+int _ip_is_in_subnet(char *ip1, size_t len1, enum enum_ip_type ip1_type, char *ip2, size_t len2, enum enum_ip_type ip2_type, int netmask)
+{
+	struct in_addr in_addr1, in_addr2;
+	struct in6_addr in6_addr1, in6_addr2;
+	char _ip1[INET6_ADDRSTRLEN], _ip2[INET6_ADDRSTRLEN];
+	uint32_t ipv4_mask;
+	uint8_t ipv6_mask[16];
+	int i;
+
+	// Not same IP type, return false.
+	if (ip1_type != ip2_type)
+		return 0;
+
+	memcpy(_ip1, ip1, len1);
+	_ip1[len1] = '\0';
+	memcpy(_ip2, ip2, len2);
+	_ip2[len2] = '\0';
+
+	switch(ip1_type) {
+		// Comparing IPv4 with IPv4.
+		case(ip_type_ipv4):
+			if (inet_pton(AF_INET, _ip1, &in_addr1) == 0)  return 0;
+			if (inet_pton(AF_INET, _ip2, &in_addr2) == 0)  return 0;
+			if (netmask <0 || netmask > 32)  return 0;
+			if (netmask == 32) ipv4_mask = 0xFFFFFFFF;
+			else ipv4_mask = htonl(~(0xFFFFFFFF >> netmask));
+			if ((in_addr1.s_addr & ipv4_mask) == in_addr2.s_addr)
+				return 1;
+			else
+				return 0;
+			break;
+			// Comparing IPv6 with IPv6.
+		case(ip_type_ipv6):
+			if (inet_pton(AF_INET6, _ip1, &in6_addr1) != 1)  return 0;
+			if (inet_pton(AF_INET6, _ip2, &in6_addr2) != 1)  return 0;
+			if (netmask <0 || netmask > 128)  return 0;
+			for (i=0; i<16; i++)
+			{
+				if (netmask > ((i+1)*8)) ipv6_mask[i] = 0xFF;
+				else if (netmask > (i*8))  ipv6_mask[i] = ~(0xFF >> (netmask-(i*8)));
+				else ipv6_mask[i] = 0x00;
+			}
+			for (i=0; i<16; i++)  in6_addr1.s6_addr[i] &= ipv6_mask[i];
+			if (memcmp(in6_addr1.s6_addr, in6_addr2.s6_addr, sizeof(in6_addr1.s6_addr)) == 0)
+				return 1;
+			else
+				return 0;
+			break;
+		default:
+			return 0;
+			break;
+	}
+}
+
 
 
 /*
@@ -435,6 +494,79 @@ static int w_compare_pure_ips(struct sip_msg* _msg, char* _s1, char* _s2)
     return -1;
 }
 
+/*! \brief Return true if the first IP (string or pv) is within the subnet defined by the second IP in CIDR notation. IPv6 references not allowed. */
+static int w_ip_is_in_subnet(struct sip_msg* _msg, char* _s1, char* _s2)
+{
+	str string1, string2;
+	enum enum_ip_type ip1_type, ip2_type;
+	char *cidr_pos = NULL;
+	int netmask = 0;
+
+	if (_s1 == NULL || _s2 == NULL ) {
+		LM_ERR("bad parameters\n");
+		return -2;
+	}
+
+	if (fixup_get_svalue(_msg, (gparam_p)_s1, &string1))
+	{
+		LM_ERR("cannot print the format for first string\n");
+		return -3;
+	}
+
+	if (fixup_get_svalue(_msg, (gparam_p)_s2, &string2))
+	{
+		LM_ERR("cannot print the format for second string\n");
+		return -3;
+	}
+
+	switch(ip1_type = ip_parser_execute(string1.s, string1.len)) {
+		case(ip_type_error):
+			return -1;
+			break;
+		case(ip_type_ipv6_reference):
+			return -1;
+			break;
+		default:
+			break;
+	}
+	cidr_pos = string2.s + string2.len - 1;
+	while (cidr_pos > string2.s)
+	{
+		if (*cidr_pos == '/')
+		{
+			string2.len = (cidr_pos - string2.s);
+			netmask = atoi(cidr_pos+1);
+			break;
+		}
+		cidr_pos--;
+	}
+	switch(ip2_type = ip_parser_execute(string2.s, string2.len)) {
+		case(ip_type_error):
+			return -1;
+			break;
+		case(ip_type_ipv6_reference):
+			return -1;
+			break;
+		default:
+			break;
+	}
+
+	if (netmask == 0)
+	{
+		if (_compare_ips(string1.s, string1.len, ip1_type, string2.s, string2.len, ip2_type))
+			return 1;
+		else
+			return -1;
+	}
+	else
+	{
+		if (_ip_is_in_subnet(string1.s, string1.len, ip1_type, string2.s, string2.len, ip2_type, netmask))
+			return 1;
+		else
+			return -1;
+	}
+}
+
 
 /*! \brief Return true if the given argument (string or pv) is a valid RFC 1918 IPv4 (private address). */
 static int w_is_ip_rfc1918(struct sip_msg* _msg, char* _s)
-- 
1.7.1

